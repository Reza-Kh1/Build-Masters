datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// npx prisma db push آپدیت مدل ها
/////////////////////////////       Model User         /////////////////////////////
model User {
  id         String      @id @default(uuid()) @db.Uuid
  name       String // نام  
  password   String
  email      String?     @unique // ایمیل
  phone      String      @unique // شماره تلفن
  role       RolePerson  @default(AUTHOR)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  Contractor Contractor?
  Post       Post[]

  @@index([name, phone, role])
}

enum RolePerson {
  ADMIN
  CONSTARCTOR
  AUTHOR
}

/////////////////////////////       Model Contractor         /////////////////////////////
model Contractor {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  phone       String   @unique
  email       String   @unique
  socialMedia Json?
  bio         String?  @db.Text
  avatar      String?
  rating      Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  categoryId  Int
  Category    Category @relation(fields: [categoryId], references: [id])

  Tags Tag[] @relation("ContractorTags")

  userId  String?   @unique @db.Uuid
  User    User?     @relation(fields: [userId], references: [id])
  Comment Comment[]
  Project Project[]

  @@index([name, bio])
  @@index([id])
}

/////////////////////////////       Model Category         /////////////////////////////

model Category {
  id            Int          @id @default(autoincrement())
  name          String       @unique
  slug          String       @unique
  subCategoryId Int?
  SubCategoryTo Category?    @relation("SubCategory", fields: [subCategoryId], references: [id])
  SubCategorys  Category[]   @relation("SubCategory")
  Post          Post[]
  Contractor    Contractor[]
  Project       Project[]

  @@index([subCategoryId])
}

/////////////////////////////       Model Post         /////////////////////////////

model Post {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  image       String
  description String   @db.Text
  isPublished Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Tags       Tag[]    @relation("PostTags")
  userId     String   @unique @db.Uuid
  user       User     @relation(fields: [userId], references: [id])
  categoryId Int
  Category   Category @relation(fields: [categoryId], references: [id])

  DetailPost DetailPost?
  Comment    Comment[]
  @@index([name, description])
  @@index([isPublished])
}

/////////////////////////////       Model DetailPost         /////////////////////////////
model DetailPost {
  id      Int      @id @default(autoincrement())
  content String   @db.Text
  title   String
  keyword String[]
  postId  Int      @unique
  Post    Post     @relation(fields: [postId], references: [id])
}

/////////////////////////////       Model onlinePrice         /////////////////////////////
model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique

  Project    Project[]    @relation("ProjectTags")
  Post       Post[]       @relation("PostTags")
  Contractor Contractor[] @relation("ContractorTags")

  @@index([name])
}

/////////////////////////////       Model Comment         /////////////////////////////
model Comment {
  id          Int     @id @default(autoincrement())
  isPublished Boolean @default(false)
  name        String
  phone       String
  content     String  @db.Text
  rating      Int?

  postId         Int?
  Post           Post?       @relation(fields: [postId], references: [id])
  contractorId   Int?
  Contractor     Contractor? @relation(fields: [contractorId], references: [id])
  commentReply   Int?
  CommentReplyTo Comment?    @relation("commentReplys", fields: [commentReply], references: [id])
  CommentReplys  Comment[]   @relation("commentReplys")
  createdAt      DateTime    @default(now())

  @@index([isPublished, commentReply])
}

/////////////////////////////       Model Project         /////////////////////////////
model Project {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  address     String
  image       String
  gallery     String[]
  video       String
  description String
  stratDate   DateTime?
  endDate     DateTime?
  price       String?
  isPublished Boolean   @default(false)

  categoryId   Int
  Category     Category   @relation(fields: [categoryId], references: [id])
  Tags         Tag[]      @relation("ProjectTags")
  contractorId Int
  Contractor   Contractor @relation(fields: [contractorId], references: [id])

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

/////////////////////////////       Model Media         /////////////////////////////
model Media {
  id        Int          @id @default(autoincrement())
  url       String
  type      TypeMedia    @default(IMAGE)
  uploader  TypeUploader @default(USER)
  createdAt DateTime     @default(now())
}

enum TypeUploader {
  ADMIN
  USER
}

enum TypeMedia {
  IMAGE
  VIDEO
}

/////////////////////////////       Model onlinePrice         /////////////////////////////
model onlinePrice {
  id          Int      @id @default(autoincrement())
  name        String
  phone       String
  description String   @db.Text
  price       String?
  subject     String
  images      String[]
  size        String
  isStatus    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updateAt    DateTime @updatedAt
}

/////////////////////////////       Model PageData         /////////////////////////////
model PageData {
  id           Int      @id @default(autoincrement())
  page         String   @unique
  conetent     Json
  keyword      String[]
  description  String
  title        String
  name         String
  canonicalUrl String

  @@index([page])
}
